//StreamDeck com Arduino 12 Keyboard

#include <Keyboard.h>

// Key definitions
#define BUTTON_KEY13 KEY_F13
#define BUTTON_KEY14 KEY_F14
#define BUTTON_KEY15 KEY_F15
#define BUTTON_KEY16 KEY_F16
#define BUTTON_KEY17 KEY_F17
#define BUTTON_KEY18 KEY_F18
#define BUTTON_KEY19 KEY_F19
#define BUTTON_KEY20 KEY_F20
#define BUTTON_KEY21 KEY_F21
#define BUTTON_KEY22 KEY_F22
#define BUTTON_KEY23 KEY_F23
#define BUTTON_KEY24 KEY_F24

// Pin definitions
#define BUTTON_PIN2 2
#define BUTTON_PIN3 3
#define BUTTON_PIN4 4
#define BUTTON_PIN5 5
#define BUTTON_PIN6 9
#define BUTTON_PIN7 8
#define BUTTON_PIN8 7
#define BUTTON_PIN9 6
#define BUTTON_PIN10 15
#define BUTTON_PIN14 14
#define BUTTON_PIN15 16
#define BUTTON_PIN16 10

// Button helper class for handling press/release and debouncing
class Button {
public:
  const char key;
  const uint8_t pin;

  Button(uint8_t k, uint8_t p) : key(k), pin(p) {}

  void press(boolean state) {
    if (state == pressed || (millis() - lastPressed <= debounceTime)) {
      return; // Nothing to see here, folks
    }

    lastPressed = millis();

    if (state) {
      Keyboard.press(key);
    } else {
      Keyboard.release(key);
    }

    pressed = state;
  }

  void update() {
    int pinValue = digitalRead(pin);
    press(pinValue == LOW); // Assume the button is active-low
  }

private:
  const unsigned long debounceTime = 30;
  unsigned long lastPressed = 0;
  boolean pressed = false;
};

// Button objects, organized in array
Button buttons[] = {
  {BUTTON_KEY13, BUTTON_PIN2}, 
  {BUTTON_KEY14, BUTTON_PIN3}, 
  {BUTTON_KEY15, BUTTON_PIN4},
  {BUTTON_KEY16, BUTTON_PIN5}, 
  {BUTTON_KEY17, BUTTON_PIN6}, 
  {BUTTON_KEY18, BUTTON_PIN7}, 
  {BUTTON_KEY19, BUTTON_PIN8}, 
  {BUTTON_KEY20, BUTTON_PIN9}, 
  {BUTTON_KEY21, BUTTON_PIN10}, 
  {BUTTON_KEY22, BUTTON_PIN14}, 
  {BUTTON_KEY23, BUTTON_PIN15}, 
  {BUTTON_KEY24, BUTTON_PIN16}
};

const uint8_t NumButtons = sizeof(buttons) / sizeof(Button);

void setup() {
  // Safety check. Ground pin #1 (RX) to cancel keyboard inputs.
  pinMode(1, INPUT_PULLUP);
  if (!digitalRead(1)) {
    failsafe();
  }

  // Initialize each button pin
  for (int i = 0; i < NumButtons; i++) {
    pinMode(buttons[i].pin, INPUT_PULLUP);
  }
  Keyboard.begin();
}

void loop() {
  for (int i = 0; i < NumButtons; i++) {
    buttons[i].update();
    // Adiciona um pequeno delay para evitar leituras mÃºltiplas
    delay(10);
  }
}

void failsafe() {
  for (;;) {
    // Just going to hang out here for a while :D
  }
}

